/* 
------------------------------------------------------------------------------------------------------------

Create a chart using Chart.Us to reflect data stored in local storage

------------------------------------------------------------------------------------------------------------ 
*/

// To create the chart we used chart.js. For more information go to their website at https://www.chartjs.org/
document.addEventListener('DOMContentLoaded', function() {
    let budgetChartInstance; // Variable to hold the current chart instance

    function createBudgetPieChart(trip) {
        const categoryCosts = {}; // Object to hold category costs, so they can be added together
        const categoryActivities = {}; // Object to hold activities by category

        // Prepare costs by category for the selected trip
        if (trip.activities) {
            trip.activities.forEach(activity => {
                const category = activity.category; // get the category of each activity
                const cost = activity.costPerPerson; // get the cost per person for each activity
                if (!categoryCosts[category]) {
                    categoryCosts[category] = 0;
                    categoryActivities[category] = []; // Initialize array for activities
                }
                categoryCosts[category] += cost * trip.attendees; // Multiply cost per person by number of attendees
                categoryActivities[category].push(activity.name); // Store activity name
            });
        }

        // Prepare data for the chart
        // This defines the labels and data for the charts
        const labels = Object.keys(categoryCosts);
        const data = Object.values(categoryCosts);

        // Calculate total cost for percentage calculations
        // Had to use chatgpt to help figure out how to simplify this math
        const totalCost = data.reduce((sum, value) => sum + value, 0);
        const percentages = data.map(value => ((value / totalCost) * 100).toFixed(2));

        // Destroy the previous chart instance if it exists
        if (budgetChartInstance) {
            budgetChartInstance.destroy();
        }

        // Create the pie chart
        // This section of my createBudgetPieChart funciton was mostly generated by chatgpt
        // I fed chatgpt what I wanted my pie chart to look like, and used it to troubleshoot issues as they arose
        const ctx = document.getElementById('budgetChart').getContext('2d');
        budgetChartInstance = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Budget by Category',
                    data: data,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(tooltipItem) {
                                const label = tooltipItem.label || '';
                                const value = tooltipItem.raw || 0;
                                const percentage = percentages[tooltipItem.dataIndex];
                                return `${label}: $${value} (${percentage}%)`;
                            }
                        }
                    },
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Budget Distribution by Category'
                    }
                },
                onClick: (evt) => {
                    const activePoints = budgetChartInstance.getElementsAtEventForMode(evt, 'nearest', {
                        intersect: true
                    }, false);
                    if (activePoints.length) {
                        const clickedIndex = activePoints[0].index;
                        const clickedLabel = labels[clickedIndex];
                        const activities = categoryActivities[clickedLabel]; // Get activities for the clicked category
                        showDrillDownDetails(clickedLabel, categoryCosts[clickedLabel], activities);
                    }
                }
            }
        });
    }

    // Function to show drill-down details including activity names
    function showDrillDownDetails(category, totalCost, activities) {
        const activityList = activities.join(', '); // Create a string of activities
        alert(`Drill-down for category: ${category}\nTotal cost: $${totalCost}\nActivities: ${activityList}`);
    }




    /* 
    ------------------------------------------------------------------------------------------------------------

    Populate the dropdown menu with trips stored in local storage
    When a selection is made, have it display the trip information(Itenerary, Chart.js, and Packing List)

    ------------------------------------------------------------------------------------------------------------ 
    */
// Function to populate the dropdown with trip destinations from local storage
function populateTripDropdown() {
    const tripSelector = document.getElementById('tripSelector');
    tripSelector.innerHTML = ''; // Clear existing options

    // Create a default option that prompts the user to select
    const defaultOption = document.createElement('option');
    defaultOption.value = ''; // No selection
    defaultOption.textContent = 'Select a trip'; // Prompt user to select
    tripSelector.appendChild(defaultOption);

    // Retrieve trip data from local storage
    const trips = JSON.parse(localStorage.getItem('trips'));

    // Check if trip data exists and add options
    if (trips && Array.isArray(trips) && trips.length > 0) {
        // Create an option for each trip
        trips.forEach((trip, index) => {
            const option = document.createElement('option');
            option.value = index; // Store the index for later use
            option.textContent = trip.destination; // Display the destination
            tripSelector.appendChild(option);
        });
    }

    // Ensure there's always at least one valid option
    if (tripSelector.options.length === 1) {
        const noTripsOption = document.createElement('option');
        noTripsOption.value = ''; // No selection
        noTripsOption.textContent = 'No trips available'; // Notify user
        tripSelector.appendChild(noTripsOption);
    }
}



    /* 
    ------------------------------------------------------------------------------------------------------------

    Function to display the Trip Information after a selection is made from the dropdown menu

    ------------------------------------------------------------------------------------------------------------ 
    */


    function displayTripDetails() {
        const tripSelector = document.getElementById('tripSelector');
        const packingListSection = document.getElementById('packingListSection');
        const budgetChart = document.getElementById('budgetChart');
        const itinerarySection = document.getElementById('itinerarySection');
        const itineraryTableBody = document.getElementById('itineraryTableBody'); // Ensure you get this element
        const itineraryTableHead = document.getElementById('itineraryTableHead'); // Ensure you get this element

        // Clear previous itinerary rows
        itineraryTableBody.innerHTML = '';

        // Get selected trip's index
        const selectedIndex = tripSelector.value;

        // Retrieve trip data from local storage
        const trips = JSON.parse(localStorage.getItem('trips'));
        if (!trips || !Array.isArray(trips)) {
            console.error('No trips found in local storage.');
            return; // Exit if no trips are found
        }

        const selectedTrip = trips[selectedIndex];
        if (!selectedTrip) {
            console.error('Selected trip is undefined.');
            return; // Exit if the selected trip is undefined
        }

        // If a trip is selected, display its itinerary, packing list, and budget chart
        if (selectedTrip.activities && Array.isArray(selectedTrip.activities)) {
            // Show sections
            packingListSection.style.display = 'block';
            budgetChart.style.display = 'block';
            itineraryTableHead.style.display = 'table-header-group';
            itinerarySection.style.display = 'block';

            // Organize activities by date
            const activitiesByDate = {};

            selectedTrip.activities.forEach(activity => {
                const date = activity.date;
                if (!activitiesByDate[date]) {
                    activitiesByDate[date] = [];
                }
                activitiesByDate[date].push(activity);
            });

            // Sort dates
            const sortedDates = Object.keys(activitiesByDate).sort();

            // Populate the itinerary table
            sortedDates.forEach(date => {
                const activities = activitiesByDate[date];

                // Add a date row
                const dateRow = document.createElement('tr');
                dateRow.innerHTML = `<td colspan="5" class="font-bold py-2 px-4 border-b">${date}</td>`;
                itineraryTableBody.appendChild(dateRow);

                // Sort activities by start time
                activities.sort((a, b) => new Date(`${a.date}T${a.startTime}`) - new Date(`${b.date}T${b.startTime}`));

                activities.forEach((activity, activityIndex) => {
                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-100';
                    row.innerHTML = `
                    <td class="py-2 px-4 border-b">${activity.date}</td>
                    <td class="py-2 px-4 border-b">${activity.startTime}</td>
                    <td class="py-2 px-4 border-b hidden md:table-cell">${activity.endTime}</td>
                    <td class="py-2 px-4 border-b">${activity.name}</td>
                    <td class="py-2 px-4 border-b hidden md:table-cell">
                        <details class="group">
                            <summary class="cursor-pointer text-blue-600 hover:underline">View Details</summary>
                            <div class="mt-2 bg-gray-50 p-4 border border-gray-200">
                                <p><strong>Description:</strong> ${activity.description}</p>
                                <p><strong>Cost per Person:</strong> $${activity.costPerPerson}</p>
                            </div>
                        </details>
                    </td>
                    <td class="py-2 px-4 border-b">
                        <button class="text-red-600 hover:underline delete-button" data-index="${selectedTrip.activities.indexOf(activity)}">Delete</button>
                    </td>
                `;
                    itineraryTableBody.appendChild(row);
                });
            });

            // Clear previous packing list items
            const packingList = document.getElementById('packingList');
            packingList.innerHTML = '';

            // Collect unique items to pack
            const uniqueItems = new Set();
            selectedTrip.activities.forEach(activity => {
                if (activity.itemsToPack) {
                    activity.itemsToPack.forEach(item => uniqueItems.add(item));
                }
            });

            // Create cards for unique items
            uniqueItems.forEach(item => {
                const itemCard = document.createElement('div');
                itemCard.className = 'p-4 border rounded shadow hover:shadow-lg transition-shadow duration-200';
                itemCard.style.backgroundColor = '#98B5AB';
                const itemName = document.createElement('p');
                itemName.className = 'font-semibold text-black';
                itemName.textContent = item;
                itemCard.appendChild(itemName);
                packingList.appendChild(itemCard);
            });

            // Create the budget chart for the selected trip
            createBudgetPieChart(selectedTrip);
        } else {
            console.error('No activities found for the selected trip.');
            // Hide sections if no activities
            packingListSection.style.display = 'none';
            budgetChart.style.display = 'none';
            itineraryTableHead.style.display = 'none';
            itinerarySection.style.display = 'none';
        }
    }




    /* 
    ------------------------------------------------------------------------------------------------------------

    Delete button Modal

    ------------------------------------------------------------------------------------------------------------ 
    */
    function showDeleteModal(activityIndex, trip) {
        const modal = document.getElementById('deleteModal');
        modal.classList.remove('hidden');

        document.getElementById('confirmDelete').onclick = function() {
            // Perform deletion
            trip.activities.splice(activityIndex, 1);
            updateLocalStorage(trip);
            modal.classList.add('hidden');
            displayTripDetails();
        };

        document.getElementById('cancelDelete').onclick = function() {
            modal.classList.add('hidden');
        };
    }

    // Replace the confirmDelete call in the event listener
    document.getElementById('itineraryTableBody').addEventListener('click', function(e) {
        if (e.target.classList.contains('delete-button')) {
            const activityIndex = e.target.getAttribute('data-index');
            const tripSelector = document.getElementById('tripSelector');
            const selectedIndex = tripSelector.value;
            const trips = JSON.parse(localStorage.getItem('trips'));
            const selectedTrip = trips[selectedIndex];
            showDeleteModal(activityIndex, selectedTrip); // Use custom modal
        }
    });


    /* 
    ------------------------------------------------------------------------------------------------------------

    Function to update local storage 

    ------------------------------------------------------------------------------------------------------------ 
    */
    // Function to update local storage
    function updateLocalStorage(trip) {
        const tripSelector = document.getElementById('tripSelector');
        const selectedIndex = tripSelector.value;
        const trips = JSON.parse(localStorage.getItem('trips'));
        trips[selectedIndex] = trip;
        localStorage.setItem('trips', JSON.stringify(trips));
    }



    /* 
    ------------------------------------------------------------------------------------------------------------

    Calling functions

    ------------------------------------------------------------------------------------------------------------ 
    */
    // Add event listener to dropdown
    document.getElementById('tripSelector').addEventListener('change', displayTripDetails);

    // Call the function to populate the dropdown when the page loads
    populateTripDropdown();
});